using System;
using System.Data;
using System.Data.SqlClient;


namespace NSW.Data
{
    public class Post
    {
        public int ID { get; set; }
        public int CategoryID { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public DateTime Expiry { get; set; }
        public int UserID { get; set; }
        public string Status { get; set; }
        public bool DeleteFlag { get; set; }

        private SqlConnection postConn = new SqlConnection(NSW.Info.ConnectionInfo.ConnectionString);

        public Post()
        { }

        public Post(int identifier)
        {
            try
            {
                SqlCommand postComm = postConn.CreateCommand();
                postComm.CommandType = CommandType.Text;
                postComm.CommandText = "Select * from tblPosts where fldPost_id=" + identifier.ToString();
                SqlDataAdapter adap = new SqlDataAdapter(postComm);
                DataSet ds = new DataSet();
                postConn.Open();
                adap.Fill(ds);
                postConn.Close();
                if (ds.Tables[0].Rows.Count == 1)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    this.ID = Convert.ToInt32(dr["fldPost_id"]);
                    this.CategoryID = Convert.ToInt32(dr["fldPost_CategoryID"]);
                    this.Title = dr["fldPost_Title"].ToString();
                    this.Description = dr["fldPost_Description"].ToString();
                    this.Price = Convert.ToDecimal(dr["fldPost_Price"]);
                    this.Expiry = Convert.ToDateTime(dr["fldPost_Expiry"]);
                    this.UserID = Convert.ToInt32(dr["fldPost_UserID"]);
                    this.Status = dr["fldPost_Status"].ToString();
                    this.DeleteFlag = Convert.ToBoolean(dr["fldPost_DeleteFlag"]);
                }
                else
                {
                    Exception ex = new Exception("There are either no rows, or too many rows with the ID " + identifier.ToString());
                    throw ex;
                }
            }
            catch (Exception x)
            {
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.ByID", x, LogEnum.Critical);
            }
        }

        public void insertPost()
        {
            try
            {
                SqlCommand postComm = postConn.CreateCommand();
                postComm.CommandType = CommandType.StoredProcedure;
                postComm.CommandText = "insertPost";
                SqlParameter param = new SqlParameter("@catID", this.CategoryID);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@title", this.Title);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@desc", this.Description);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@price", this.Price);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@userID", this.UserID);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@ID", SqlDbType.Int);
                param.Direction = ParameterDirection.Output;
                postComm.Parameters.Add(param);
                postConn.Open();
                int result = postComm.ExecuteNonQuery();
                postConn.Close();
                this.ID = Convert.ToInt32(param.Value);
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.insertPost", "Post inserted result : " + result.ToString(), LogEnum.Debug);
            }
            catch (Exception x)
            {
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.insertPost", x, LogEnum.Critical);
            }
        }

        public void modifyPost()
        {
            try
            {
                SqlCommand postComm = postConn.CreateCommand();
                postComm.CommandType = CommandType.StoredProcedure;
                postComm.CommandText = "modifyPost";
                SqlParameter param = new SqlParameter("@ID", this.ID);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@title", this.Title);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@desc", this.Description);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@price", this.Price);
                postComm.Parameters.Add(param);
                param = new SqlParameter("@status", this.Status);
                postComm.Parameters.Add(param);
                postConn.Open();
                int result = postComm.ExecuteNonQuery();
                postConn.Close();
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.insertPost", "Post modified result : " + result.ToString(), LogEnum.Debug);
            }
            catch (Exception x)
            {
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.modifyPost", x, LogEnum.Critical);
            }
        }

        public void setDeleteFlag()
        {
            this.DeleteFlag = true;
            modifyPost();
        }

        public NSW.Data.User PostUser()
        {
            try
            {
                if (this.UserID != 0)
                {
                    NSW.Data.User postUser = new User(this.UserID);
                    return postUser;
                }
            }
            catch (Exception x)
            {
                Log.WriteToLog(NSW.Info.ProjectInfo.ProjectLogType, "Post.PostUser", x, LogEnum.Critical);
            }
            return new NSW.Data.User();
        }
    }
}
